import React from 'react';
import { Box, Heading, Text, Stack, HStack, Divider, Flex } from '@chakra-ui/react';
import { AddIcon, WarningIcon, CheckIcon, TriangleDownIcon } from '@chakra-ui/icons';
import { CheckCircleIcon } from '@chakra-ui/icons';

const Advisor = ({ event }) => {
  // Sample event data for demonstration
  event = {
    "recommendation": {
      "shouldVisit": {
        "decision": "no",
        "reasons": {
          "pro": [],
          "con": [
            "M√†n bi·ªÉu di·ªÖn phun l·ª≠a v√† phun n∆∞·ªõc ch·ªâ di·ªÖn ra v√†o Th·ª© B·∫£y v√† Ch·ªß nh·∫≠t, trong khi b·∫°n mu·ªën tham d·ª± v√†o Th·ª© Hai.",
            "Th·ªùi ti·∫øt d·ª± b√°o s·∫Ω nhi·ªÅu m√¢y v√†o ng√†y Th·ª© Hai, c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn t·∫ßm nh√¨n khi xem m√†n bi·ªÉu di·ªÖn."
          ]
        },
        "advice": "D·ª±a tr√™n th√¥ng tin b·∫°n cung c·∫•p, b·∫°n kh√¥ng n√™n tham d·ª± v√†o ng√†y Th·ª© Hai v√¨ m√†n bi·ªÉu di·ªÖn kh√¥ng di·ªÖn ra v√†o ng√†y n√†y. B·∫°n n√™n c√¢n nh·∫Øc tham d·ª± v√†o Th·ª© B·∫£y ho·∫∑c Ch·ªß nh·∫≠t khi th·ªùi ti·∫øt thu·∫≠n l·ª£i h∆°n."
      }
    },
    "preparation": {
      "items": [
        {
          "item": "M√°y ·∫£nh",
          "reason": "ƒê·ªÉ ghi l·∫°i nh·ªØng kho·∫£nh kh·∫Øc ƒë·∫πp c·ªßa m√†n tr√¨nh di·ªÖn phun l·ª≠a v√† phun n∆∞·ªõc."
        },
        {
          "item": "N∆∞·ªõc u·ªëng",
          "reason": "ƒê·ªÉ gi·ªØ n∆∞·ªõc, ƒë·∫∑c bi·ªát l√† khi tr·ªùi n√≥ng v√† ·∫©m ∆∞·ªõt."
        },
        {
          "item": "Qu·∫ßn √°o tho·∫£i m√°i",
          "reason": "V√¨ b·∫°n s·∫Ω ph·∫£i di chuy·ªÉn v√† ƒë·ª©ng xem trong m·ªôt kho·∫£ng th·ªùi gian."
        },
        {
          "item": "Thu·ªëc d·ªã ·ª©ng",
          "reason": "ƒê·ªÉ ƒë·ªÅ ph√≤ng tr∆∞·ªùng h·ª£p d·ªã ·ª©ng do kh√≥i ho·∫∑c b·ª•i."
        }
      ],
      "advice": "N√™n mang theo √≠t ƒë·ªì ƒë·∫°c g·ªçn nh·∫π ƒë·ªÉ thu·∫≠n ti·ªán cho vi·ªác di chuy·ªÉn v√† th∆∞·ªüng th·ª©c m√†n bi·ªÉu di·ªÖn."
    },
    "caution": {
      "warnings": [
        {
          "warning": "Tr√°nh ƒë·ª©ng qu√° g·∫ßn khu v·ª±c phun l·ª≠a",
          "reason": "V√¨ c√≥ th·ªÉ g√¢y nguy hi·ªÉm."
        },
        {
          "warning": "C·∫©n th·∫≠n v·ªõi c√°c thi·∫øt b·ªã ƒëi·ªán t·ª≠",
          "reason": "Do m√†n bi·ªÉu di·ªÖn phun n∆∞·ªõc c√≥ th·ªÉ l√†m ∆∞·ªõt thi·∫øt b·ªã."
        },
        {
          "warning": "Ch√∫ √Ω b·∫£o qu·∫£n t∆∞ trang",
          "reason": "ƒê·ªÉ tr√°nh tr∆∞·ªùng h·ª£p b·ªã m·∫•t c·∫Øp trong ƒë√°m ƒë√¥ng."
        }
      ],
      "advice": "Lu√¥n ƒë·ªÅ cao c·∫£nh gi√°c, gi·ªØ kho·∫£ng c√°ch an to√†n v·ªõi ƒë√°m ƒë√¥ng v√† tu√¢n th·ªß h∆∞·ªõng d·∫´n t·ª´ ban t·ªï ch·ª©c."
    },
    "ideal_time": "V√†o bu·ªïi t·ªëi Th·ª© B·∫£y ho·∫∑c Ch·ªß nh·∫≠t, kho·∫£ng 20:30 - 20:45 ƒë·ªÉ c√≥ th·ªÉ tho·∫£i m√°i l·ª±a ch·ªçn v·ªã tr√≠ ƒë·∫πp v√† th∆∞·ªüng th·ª©c tr·ªçn v·∫πn m√†n tr√¨nh di·ªÖn t·ª´ l√∫c b·∫Øt ƒë·∫ßu.",
    "tips": {
      "general": [
        {
          "tip": "T√¨m hi·ªÉu tr∆∞·ªõc v·ªÅ l·ªãch tr√¨nh v√† ƒë·ªãa ƒëi·ªÉm di·ªÖn ra m√†n bi·ªÉu di·ªÖn.",
          "reason": "ƒê·ªÉ ch·ªß ƒë·ªông trong vi·ªác di chuy·ªÉn v√† s·∫Øp x·∫øp th·ªùi gian."
        },
        {
          "tip": "ƒê·∫øn s·ªõm ƒë·ªÉ c√≥ th·ªÉ ch·ªçn ƒë∆∞·ª£c v·ªã tr√≠ ƒë·∫πp ƒë·ªÉ xem.",
          "reason": "V√†o th·ªùi gian di·ªÖn ra s·ª± ki·ªán th∆∞·ªùng r·∫•t ƒë√¥ng ƒë√∫c."
        },
        {
          "tip": "K·∫øt h·ª£p tham quan c·∫ßu R·ªìng v√† c√°c ƒë·ªãa ƒëi·ªÉm du l·ªãch g·∫ßn ƒë√≥.",
          "reason": "ƒê·ªÉ t·ªëi ∆∞u h√≥a th·ªùi gian v√† tr·∫£i nghi·ªám c·ªßa b·∫°n."
        }
      ],
      "specific": [
        {
          "tip": "N√™n ƒë·ª©ng ·ªü khu v·ª±c g·∫ßn s√¥ng H√†n",
          "reason": "ƒê·ªÉ c√≥ th·ªÉ th∆∞·ªüng th·ª©c tr·ªçn v·∫πn v·∫ª ƒë·∫πp c·ªßa m√†n tr√¨nh di·ªÖn k·∫øt h·ª£p v·ªõi khung c·∫£nh s√¥ng n∆∞·ªõc."
        },
        {
          "tip": "N√™n chu·∫©n b·ªã s·∫µn s√†ng m√°y ·∫£nh ho·∫∑c ƒëi·ªán tho·∫°i",
          "reason": "ƒê·ªÉ kh√¥ng b·ªè l·ª° nh·ªØng kho·∫£nh kh·∫Øc ·∫•n t∆∞·ª£ng c·ªßa m√†n bi·ªÉu di·ªÖn phun l·ª≠a v√† phun n∆∞·ªõc."
        }
      ],
      "advice": "H√£y t·∫≠n h∆∞·ªüng tr·ªçn v·∫πn kh√¥ng kh√≠ s√¥i ƒë·ªông v√† m√†n tr√¨nh di·ªÖn √°nh s√°ng tuy·ªát ƒë·∫πp c·ªßa C·∫ßu R·ªìng."
    }
<<<<<<< HEAD
  };

  return (
    <Box mx="auto">
      <Heading size="lg" marginBottom="1.5rem">
        Quy·∫øt ƒë·ªãnh:
        {event.recommendation.shouldVisit.decision === "yes" ? "üòç"
          : event.recommendation.shouldVisit.decision === "no" ? "üòû"
            : "ü§î"}
      </Heading>
      <Flex gap="0.5rem">
        <Heading size="sm" color="gray.700" width="80px">
          L√≠ do:
        </Heading>
        <Stack fontSize="md" color="gray.600" mb={2}>
          {event.recommendation.shouldVisit.reasons.pro.map((reason, index) => (
            <Text key={index} fontSize="md" color="gray.600" mb={2}>
              &#8226; {reason}
            </Text>
          ))}
          {event.recommendation.shouldVisit.reasons.con.map((reason, index) => (
            <Text key={index} fontSize="md" color="gray.600" mb={2}>
              &#8226; {reason}
            </Text>
          ))}
        </Stack>
      </Flex>
      <Divider my={4} />
      <Heading size="sm" marginBottom="0.5rem">
        C·∫ßn chu·∫©n b·ªã:
      </Heading>
      <Stack fontSize="md" color="gray.600" mb={4} ml="1rem">
        {event.preparation.items.map((item, index) => (
          <Text key={index} fontSize="md" color="gray.600" mb={2}>
            <AddIcon boxSize={3} mr="0.5rem" color="green.500" /> {item.item} - {item.reason}
          </Text>
        ))}
      </Stack>
=======
  }
    return(
        <Box
            padding="0"
        >  
            <Heading size='lg' marginBottom={"1.5rem"}>
                Quy·∫øt ƒë·ªãnh: {
                  event.recommendation.shouldVisit.decision === "yes" ? "üòç" 
                  : event.recommendation.shouldVisit.decision === "no" ? "üòû" 
                  : "ü§î"
                }
            </Heading>
            <Flex gap="0.5rem">
                <Heading size='sm' color="gray.700" width={"80px"}>
                    L√≠ do:
                </Heading>
                <Text fontSize="md" color="gray.600" mb={2}>
                    {event.recommendation.shouldVisit.reasons.pro.map((reason, index) => (
                        <Text key={index} fontSize="md" color="gray.600" mb={2}>
                            &#8226; {reason}
                        </Text>
                    ))}
                    {event.recommendation.shouldVisit.reasons.con.map((reason, index) => (
                        <Text key={index} fontSize="md" color="gray.600" mb={2}>
                            &#8226; {reason}
                        </Text>
                    ))}
                </Text>
            </Flex>
            <Divider my={4} />
            <Heading size='sm' marginBottom={"0.5rem"}>
                C·∫ßn chu·∫©n b·ªã: 
            </Heading>
            <Text fontSize="md" color="gray.600" mb={4} ml={"1rem"}>
                {event.preparation.items.map((item, index) => (
                    <Text key={index} fontSize="md" color="gray.600" mb={2}>
                        <AddIcon boxSize={3} mr={"0.5rem"} color="green.500"/> {item.item} - {item.reason}
                    </Text>
                ))}
            </Text>
            
>>>>>>> 1031fc869804bd55f79fd406d9aa39b7d2ae5f32
      <Divider my={4} />
      <Heading size="sm" marginBottom="0.5rem">
        Ch√∫ √Ω:
      </Heading>
      <Stack fontSize="md" color="gray.600" mb={4} ml="1rem" mt="0.5rem">
        {event.caution.warnings.map((warning, index) => (
          <HStack key={index} fontSize="md" color="gray.600" mb={2}>
            <WarningIcon boxSize={4} color="red.500" />
            <Text>{warning.warning}</Text>
          </HStack>
        ))}
      </Stack>
      <Divider my={4} />
      <Heading size="sm" marginBottom="0.5rem">
        Th·ªùi gian l√Ω t∆∞·ªüng:
      </Heading>
      <Text fontSize="md" color="gray.600" mb={4}>
        {event.ideal_time}
      </Text>
      <Divider my={4} />
      <Heading size="sm" marginBottom="0.5rem">
        M·ªôt s·ªë tips:
      </Heading>
      <Box ml={4} mb={4}>
        <Heading size="sm" marginBottom="1rem">
          <TriangleDownIcon boxSize={3} /> General
        </Heading>
        <Stack spacing={2} ml={3} mb={4}>
          {event.tips.general.map((tip, index) => (
            <Flex key={index} align="center">
              <CheckIcon boxSize={3} color="green.500" mr={2} />
              <Text fontSize="md" color="gray.600">
                {tip.tip} - {tip.reason}
              </Text>
            </Flex>
          ))}
        </Stack>
        <Heading size="sm" marginBottom="1rem">
          <TriangleDownIcon boxSize={3} /> Specific
        </Heading>
        <Stack spacing={2} ml={3}>
          {event.tips.specific.map((tip, index) => (
            <Flex key={index} align="center">
              <CheckIcon boxSize={3} color="green.500" mr={2} />
              <Text fontSize="md" color="gray.600">
                {tip.tip} - {tip.reason}
              </Text>
            </Flex>
          ))}
        </Stack>
      </Box>
    </Box>
  );
};

export default Advisor;
